namespace App\Filament\Resources;

use App\Filament\Resources\MediaResource\Pages;
use App\Models\MediaResource as MediaResourceModel;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\FileUpload;
use Filament\Forms\Components\Textarea;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\BadgeColumn;

class OldMediaResource extends Resource
{
protected static ?string $model = MediaResourceModel::class;

protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';
protected static ?string $navigationLabel = 'Media Resources';
protected static ?string $pluralModelLabel = 'Media Resources';

public static function form(Form $form): Form
{
return $form->schema([
Forms\Components\Section::make('Media Resource Details')->schema([

Select::make('curriculum_item_id')
->label('Curriculum Item')
->relationship('curriculumItem', 'title')
->required()
->searchable()
->preload(),


TextInput::make('title')
->required()
->maxLength(255),

Select::make('resource_type')
->label('Resource Type')
->options([
'pdf' => 'PDF',
'video' => 'Video',
'youtube' => 'YouTube',
'image' => 'Image',
'slide' => 'Slide',
'text' => 'Text',
'link' => 'Link',
])
->required()
->live()
->native(false),

FileUpload::make('file_url')
->label('Upload File')
->directory('media-resources')
->acceptedFileTypes([
'application/pdf',
'image/jpeg',
'image/png',
'image/gif',
'application/vnd.ms-powerpoint',
'application/vnd.openxmlformats-officedocument.presentationml.presentation'
])
->maxSize(50000)
->visible(fn(Forms\Get $get) => in_array($get('resource_type'), ['pdf', 'image', 'slide']))
->helperText('Upload PDF, Image, or Slide file.'),

TextInput::make('video_url')
->label('Video / YouTube URL')
->placeholder('https://…')
->url()
->visible(fn(Forms\Get $get) => in_array($get('resource_type'), ['video', 'youtube']))
->helperText('Provide the URL for a Video or YouTube resource.'),

TextInput::make('link_url')
->label('External Link')
->placeholder('https://…')
->url()
->visible(fn(Forms\Get $get) => $get('resource_type') === 'link')
->helperText('Provide a link to external resource.'),

Textarea::make('text_content')
->label('Text Content')
->rows(6)
->visible(fn(Forms\Get $get) => $get('resource_type') === 'text')
->helperText('Write the text content for this resource.'),
])->columns(1),
]);
}

public static function table(Table $table): Table
{
return $table
->defaultSort('created_at', 'desc')
->columns([
TextColumn::make('title')
->searchable()
->sortable(),

TextColumn::make('curriculumItem.title')
->label('Curriculum Item')
->searchable()
->sortable(),

BadgeColumn::make('resource_type')
->sortable()
->colors([
'pdf' => 'gray',
'video' => 'blue',
'youtube' => 'red',
'image' => 'green',
'slide' => 'yellow',
'text' => 'cyan',
'link' => 'purple',
]),

TextColumn::make('file_url')
->label('File')
->limit(30)
->wrap()
->visible(fn($record) => $record->file_url !== null),

TextColumn::make('video_url')
->label('Video')
->limit(30)
->wrap()
->visible(fn($record) => $record->video_url !== null),

TextColumn::make('link_url')
->label('Link')
->limit(30)
->wrap()
->visible(fn($record) => $record->link_url !== null),

TextColumn::make('text_content')
->label('Text')
->limit(30)
->wrap()
->visible(fn($record) => $record->text_content !== null),
])
->actions([
Tables\Actions\ViewAction::make(),
Tables\Actions\EditAction::make(),
])
->bulkActions([
Tables\Actions\BulkActionGroup::make([
Tables\Actions\DeleteBulkAction::make(),
]),
]);
}

public static function getRelations(): array
{
return [];
}

public static function getPages(): array
{
return [
'index' => Pages\ListMedia::route('/'),
'create' => Pages\CreateMedia::route('/create'),
'edit' => Pages\EditMedia::route('/{record}/edit'),
];
}
}
